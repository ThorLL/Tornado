#include "Assets/Scripts/Simulation/Resources/TornadoMath.hlsl"

//------------------------------------------------------------
// Structs
//------------------------------------------------------------

//------------------------------------------------------------
// Kernels
//------------------------------------------------------------
#pragma kernel UpdateParticles

//------------------------------------------------------------
// Uniform parameters
//------------------------------------------------------------
uint numParticles;

// Run time
float DeltaTime;

// Environment
float GroundTemperatureKelvin;
float DewPoint;

// Tornado
float2 Tornado;

// Precomputed tornado properties
float TornadoHeight;
float pcf; // CoreFunnelPressure

//------------------------------------------------------------
// Input Buffers
//------------------------------------------------------------
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> Velocities;

//------------------------------------------------------------
// Input Textures
//------------------------------------------------------------

//------------------------------------------------------------
// Output Buffers
//------------------------------------------------------------

//------------------------------------------------------------
// Output Textures
//------------------------------------------------------------

//------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------
void SampleEnvironment(uint id, float3 position,
    out float dist,
    out float pressure,
    out float airDensity,
    out float windSpeed,
    out float pressureDeficit,
    out float tornadoRadius
)
{
    float altitudinalTemperature = TemperatureAtAltitude(position.y, GroundTemperatureKelvin);
    float altitudinalDewPoint = DewPointAtAltitude(position.y, DewPoint);
    pressure = AltitudeToPressure(position.y, GroundTemperatureKelvin);
    
    airDensity = AirDensity(altitudinalTemperature, altitudinalDewPoint, pressure);

    float maxWindSpeed;
    if (position.y < TornadoHeight)
    {
        maxWindSpeed = MaxWindSpeed(pressure, airDensity, pcf);
    }
    else
    {
        maxWindSpeed = 0.0f; // TODO figure out what the max wind speed is above the tornado
    }
     
    float maxPressuresDeficit = MaxPressureDeficit(maxWindSpeed, airDensity);
    tornadoRadius = CoreRadius(pressure, pcf, maxPressuresDeficit, maxWindSpeed, GroundTemperatureKelvin);

    dist = distance(Tornado, position.xz);
    
    bool inSideCore = dist < tornadoRadius;
    float ratio = inSideCore ? dist / tornadoRadius : tornadoRadius / dist;

    windSpeed = WindSpeed(maxWindSpeed, ratio);
    pressureDeficit = PressureDeficit(maxPressuresDeficit, ratio, inSideCore);
}

float3 CalculateForces(uint id, float3 position, float3 velocity)
{
    return float3(0.0f, 0.0f, 0.0f);
}

void HandleBounds(inout float3 position, inout float3 velocity)
{
    if (position.y < 1) position.y = 1;
}

//------------------------------------------------------------
// Kernel 0: Updates particle positions and velocities based on tornado dynamics
//------------------------------------------------------------
[numthreads(1024,1,1)]
void UpdateParticles (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float3 position = Positions[id.x];
    float3 velocity = Velocities[id.x];

    HandleBounds(position, velocity);

    float dist, pressure, airDensity, windSpeed, pressureDeficit, tornadoRadius;
    SampleEnvironment(id.x, position, dist, pressure, airDensity, windSpeed, pressureDeficit, tornadoRadius);

    float3 forces = CalculateForces(id.x, position, velocity);

    velocity += DeltaTime * airDensity * forces;

    if (length(velocity) > 256.0f) velocity = normalize(velocity) * 256.0f;
    
    Velocities[id.x] = velocity;
    Positions[id.x] = position + velocity * DeltaTime;
}
