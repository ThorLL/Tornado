#include "Assets/Scripts/Compute/Util/Math.hlsl"
#include "Assets/Scripts/Simulation/Resources/TornadoMath.hlsl"

//------------------------------------------------------------
// Structs
//------------------------------------------------------------

//------------------------------------------------------------
// Kernels
//------------------------------------------------------------
#pragma kernel UpdateParticles

//------------------------------------------------------------
// Uniform parameters
//------------------------------------------------------------
uint numParticles;

// Run time
float DeltaTime;

// Environment
float GroundTemperatureKelvin;
float DewPoint;
float3 EnvWind;

// Coefficients
float LiftCoefficient;
float DragCoefficient;
float WindCoefficient;
float PressureGradientCoefficient;
float WindShearStrength;

// Tornado
float2 Tornado;

// Precomputed tornado properties
float TornadoHeight;
float StormTop;
float pcf; // CoreFunnelPressure

// Despawn
int DespawnTime;
float SpawnArea;

//------------------------------------------------------------
// Input Buffers
//------------------------------------------------------------
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> Velocities;
RWStructuredBuffer<int> LiftSpans;

//------------------------------------------------------------
// Input Textures
//------------------------------------------------------------

//------------------------------------------------------------
// Output Buffers
//------------------------------------------------------------

//------------------------------------------------------------
// Output Textures
//------------------------------------------------------------

//------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------
void SampleEnvironment(uint id, float3 position,
    out float dist,
    out float distanceRatio,
    out float pressure,
    out float airDensity,
    out float windSpeed,
    out float pressureDeficit,
    out float tornadoRadius
)
{
    float altitudinalTemperature = TemperatureAtAltitude(position.y, GroundTemperatureKelvin);
    float altitudinalDewPoint = DewPointAtAltitude(position.y, DewPoint);
    pressure = AltitudeToPressure(position.y, GroundTemperatureKelvin);
    
    airDensity = AirDensity(altitudinalTemperature, altitudinalDewPoint, pressure);

    float maxWindSpeed;
    if (position.y < TornadoHeight)
    {
        maxWindSpeed = MaxWindSpeed(pressure, airDensity, pcf);
    }
    else
    {
        maxWindSpeed = 0.0f; // TODO figure out what the max wind speed is above the tornado
    }
     
    float maxPressuresDeficit = MaxPressureDeficit(maxWindSpeed, airDensity);
    tornadoRadius = CoreRadius(pressure, pcf, maxPressuresDeficit, maxWindSpeed, GroundTemperatureKelvin);

    dist = distance(Tornado, position.xz);
    
    bool inSideCore = dist < tornadoRadius;
    distanceRatio = inSideCore ? dist / tornadoRadius : tornadoRadius / dist;

    windSpeed = WindSpeed(maxWindSpeed, distanceRatio);
    pressureDeficit = PressureDeficit(maxPressuresDeficit, distanceRatio, inSideCore);
}

float3 CalculateForces(uint id, float3 position, float3 velocity,
    float dist,
    float distanceRatio,
    float pressure,
    float airDensity,
    float windSpeed,
    float pressureDeficit,
    float tornadoRadius
)
{
    // Directional vectors
    float3 dirVel = normalize(velocity);
    float2 radial = normalize(position.xz - Tornado);
    float3 radial3D = float3(radial.x, 0, radial.y);
    float3 negRadial3D = -radial3D;
    float3 tangent = float3(negRadial3D.z, 0, -negRadial3D.x);

    float halfWAirDensity = 0.5f * airDensity;
    
    float3 forces = float3(0.0f, 0.0f, 0.0f);

    // Gravity
    forces += float3(0.0f, -Gravity, 0.0f);

    // Lift and drag velocity impact
    float velocitySq = velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z;
    float velocityMagnitude = halfWAirDensity * velocitySq;

    if (velocityMagnitude > Epsilon)
    {
        // Lift
        float liftFrac = saturate((StormTop - position.y) / (StormTop - TornadoHeight));
        forces.y += velocityMagnitude * LiftCoefficient * liftFrac;

        // Drag
        forces += -dirVel * velocityMagnitude * DragCoefficient;
    }

    // Wind
    float windSpeedSq = windSpeed * windSpeed;
    float windMagnitude = halfWAirDensity * windSpeedSq;
    if (windMagnitude > Epsilon)
    {
        forces += tangent * windMagnitude * WindCoefficient;
    }

    // Wind shear
    forces += EnvWind * pow(abs(position.y), WindShearStrength);

    // Inwards pressure gradient
    if (position.y < TornadoHeight && dist > tornadoRadius)
    {
        forces += negRadial3D * (pressureDeficit / dist) * PressureGradientCoefficient;
    }
    
    float midHeight = TornadoHeight * 0.5;
    if (position.y > midHeight)
    {
        // Inner cell down drawn
        if (position.y < TornadoHeight && dist < tornadoRadius)
        {
            float heightRatio = smoothstep(midHeight, TornadoHeight, position.y);
            forces.y -= LiftCoefficient * 0.5 * heightRatio * (1.0 - distanceRatio);
        }

        // Move particles at the top outwards
        float outRamp = distanceRatio * smoothstep(midHeight, StormTop, position.y);
        forces += -negRadial3D * PressureGradientCoefficient * outRamp;
    }
    
    return forces;
}

void HandleDespawn(uint id, inout float3 position, inout float3 velocity)
{
    if (DespawnTime <= 0) return;
    
    int currentLifeSpan = LiftSpans[id];
    if (currentLifeSpan > DespawnTime)
    {
        uint seed = id;
        float2 spawnPoint = NextFloat2Direction(seed) * NextFloat(seed) * SpawnArea / 2;

        position = float3(spawnPoint.x, NextFloat(seed) * SpawnArea, spawnPoint.y);

        LiftSpans[id] = -1;
        velocity = float3(0.0f, 0.0f, 0.0f);
    }
    else if (currentLifeSpan > 0 || position.y > TornadoHeight * 0.95f)
    {
        LiftSpans[id] += 1;
        if (position.y > StormTop) LiftSpans[id] += 5;
    }
}

void HandleBounds(inout float3 position, inout float3 velocity)
{
    if (position.y < 1) position.y = 1;
}

//------------------------------------------------------------
// Kernel 0: Updates particle positions and velocities based on tornado dynamics
//------------------------------------------------------------
[numthreads(1024,1,1)]
void UpdateParticles (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float3 position = Positions[id.x];
    float3 velocity = Velocities[id.x];

    HandleBounds(position, velocity);
    HandleDespawn(id.x, position, velocity);

    float dist, distanceRatio, pressure, airDensity, windSpeed, pressureDeficit, tornadoRadius;
    SampleEnvironment(id.x, position, dist, distanceRatio, pressure, airDensity, windSpeed, pressureDeficit, tornadoRadius);

    float3 forces = CalculateForces(id.x, position, velocity, dist, distanceRatio, pressure, airDensity, windSpeed, pressureDeficit, tornadoRadius);

    velocity += DeltaTime * airDensity * forces;

    if (length(velocity) > 256.0f) velocity = normalize(velocity) * 256.0f;
    
    Velocities[id.x] = velocity;
    Positions[id.x] = position + velocity * DeltaTime;
}
